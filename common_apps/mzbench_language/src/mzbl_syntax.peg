scenario <- __ operation* !. `{scenario, lists:nth(2, Node)}`;
operation <- (multiline / single) __ `lists:nth(1, Node)`;
multiline <- id __ '(' args? ')' __ indent __ operation+ __ dedent __
`case length(lists:nth(4, Node)) of
  0 -> {call, lists:nth(1, Node), [lists:nth(9, Node)], Idx};
  _ -> {call, lists:nth(1, Node), [lists:nth(1, lists:nth(4, Node)), lists:nth(9, Node)], Idx}
end`;
single <- id __ '(' args? ')' `{call, lists:nth(1, Node), lists:nth(4, Node), Idx}`;
args <- kargs / pargs ~;
kargs <- __ head:pair tail:(__ ',' __ pair)* __
`
    Head = proplists:get_value(head, Node),
    Rest = [lists:nth(4, I) || I <- proplists:get_value(tail, Node)],
    [[Head|Rest]]
`;
pargs <- __ head:value tail:(__ ',' __ value)* __
`
    Head = proplists:get_value(head, Node),
    Rest = [lists:nth(4, I) || I <- proplists:get_value(tail, Node)],
    [Head|Rest]
`;
pair <- __ key:(id / string) __ '=' __ value:value __ `{call, proplists:get_value(key, Node), [proplists:get_value(value, Node)], Idx}`;
value <- unumber / logic_op / single / list / id / number / string ~;
logic_op <- (number / string) __ ('<=' / '>=' / '<' / '>' / '==') __ (number / string)
`{call, case lists:nth(3, Node) of
  <<"<=">> -> lte;
  <<">=">> -> gte;
  <<"<">> -> lt;
  <<">">> -> gt;
  <<"==">> -> eq
end, [lists:nth(1, Node), lists:nth(5, Node)], Idx}`;

list <- '[' pargs ']' `lists:nth(2, Node)`;
number <- int frac? mult?
`
case Node of
  [Int, [], _] -> list_to_integer(binary_to_list(iolist_to_binary(Int)));
  [Int, Frac, _] -> list_to_float(binary_to_list(iolist_to_binary([Int, Frac])));
  _ -> list_to_float(binary_to_list(iolist_to_binary(Node)))
end * case lists:nth(3, Node) of
  [] -> 1;
  ['K'] -> 1000;
  ['M'] -> 1000000;
  ['G'] -> 1000000000
end
`;
unumber <- (number / single) __ ('b' / 'kb' / 'mb' / 'gb' / 'tb' / 'ms' / 'sec' / 'min' / 'h' / 'rpm' / 'rph' / 'rps') `{value, lists:nth(1, Node), binary_to_atom(lists:nth(3, Node), latin1), Idx}`;
frac <- '.' digit+ ~;
int <- '-'? (non_zero_digit digit+) / digit ~;
mult <- ('K' / 'M' / 'G') ~;
non_zero_digit <- [1-9] ~;
digit <- [0-9] ~;
string <- '"' chars:(!'"' ("\\\\" / '\\"' / .))* '"' `binary_to_list(iolist_to_binary(proplists:get_value(chars, Node)))`;
id <- [a-z] [a-z0-9_]* `binary_to_atom(iolist_to_binary(Node), latin1)`;
__ <-  ((&'#' [^\n]* '\n') / ([ \t\n\s\r]+))* ~;
indent <- '_INDENT_' ~;
dedent <- '_DEDENT_' ~;